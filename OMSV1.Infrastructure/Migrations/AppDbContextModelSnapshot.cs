// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OMSV1.Infrastructure.Persistence;

#nullable disable

namespace OMSV1.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppRolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("EmailReportReportType", b =>
                {
                    b.Property<Guid>("EmailReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReportTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("EmailReportId", "ReportTypeId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("EmailReportReportTypes", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Attachments.AttachmentCU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EntityType");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("IX_AttachmentCU_EntityId_Document")
                        .HasFilter("\"EntityType\" = 'Document'");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_AttachmentCU_EntityType_EntityId");

                    b.ToTable("AttachmentCUs", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Attendances.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountStaff")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryStaff")
                        .HasColumnType("integer");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<int>("PrintingStaff")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("QualityStaff")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivingStaff")
                        .HasColumnType("integer");

                    b.Property<int>("WorkingHours")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Companies.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DamagedDevices.DamagedDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DamagedDeviceTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeviceTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DamagedDeviceTypeId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SerialNumber");

                    b.ToTable("DamagedDevices", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DamagedDevices.DamagedDeviceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DamagedDeviceTypes", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DamagedDevices.DeviceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DamagedPassport.DamagedPassport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DamagedTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DamagedTypeId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.HasIndex("ProfileId");

                    b.ToTable("DamagedPassports", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DamagedPassport.DamagedType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DamagedTypes", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Directorates.Directorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GeneralDirectorateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralDirectorateId");

                    b.ToTable("Directorates", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DocumentHistories.DocumentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("DocumentHistories", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAudited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsImportant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsNeeded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReplied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequiresReply")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUrgent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("ParentDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PrivatePartyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("ResponseType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.HasIndex("ParentDocumentId");

                    b.HasIndex("PrivatePartyId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SectionId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.DocumentCC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentCCs", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.DocumentCcLink", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentCcId")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentId", "DocumentCcId");

                    b.HasIndex("DocumentCcId");

                    b.ToTable("DocumentCcLinks", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.DocumentTagLink", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTagLinks", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.PrivateParty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("PrivateParties", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MonthlyExpensesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActionType");

                    b.HasIndex("MonthlyExpensesId");

                    b.ToTable("Actions", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.DailyExpenses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExpenseTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MonthlyExpensesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ParentExpenseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("MonthlyExpensesId");

                    b.HasIndex("ParentExpenseId");

                    b.ToTable("DailyExpenses", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.ExpenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.MonthlyExpenses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ThresholdId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ThresholdId");

                    b.ToTable("MonthlyExpenses", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.Threshold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Thresholds", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.GeneralDirectorates.GeneralDirectorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MinistryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("MinistryId");

                    b.ToTable("GeneralDirectorates", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Governorates.Governorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsCountry")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Governorates", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("Title");

                    b.ToTable("Lectures", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.LectureLectureType", b =>
                {
                    b.Property<Guid>("LectureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LectureTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("LectureId", "LectureTypeId");

                    b.HasIndex("LectureTypeId");

                    b.ToTable("LectureLectureTypes", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.LectureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LectureType", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Ministries.Ministry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Ministries", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Offices.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountStaff")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryStaff")
                        .HasColumnType("integer");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsEmbassy")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTwoShifts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PrintingStaff")
                        .HasColumnType("integer");

                    b.Property<int>("QualityStaff")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivingStaff")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Offices", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Reports.EmailReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("EmailReports", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Reports.ReportType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ReportTypes", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Sections.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DirectorateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Sections.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("AppRolePermission", b =>
                {
                    b.HasOne("OMSV1.Infrastructure.Identity.AppRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EmailReportReportType", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Reports.EmailReport", null)
                        .WithMany()
                        .HasForeignKey("EmailReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Reports.ReportType", null)
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("OMSV1.Infrastructure.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OMSV1.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OMSV1.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OMSV1.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Attendances.Attendance", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Governorates.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Profiles.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Office");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DamagedDevices.DamagedDevice", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.DamagedDevices.DamagedDeviceType", "DamagedDeviceTypes")
                        .WithMany()
                        .HasForeignKey("DamagedDeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.DamagedDevices.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Governorates.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Profiles.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DamagedDeviceTypes");

                    b.Navigation("DeviceType");

                    b.Navigation("Governorate");

                    b.Navigation("Office");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DamagedPassport.DamagedPassport", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.DamagedPassport.DamagedType", "DamagedType")
                        .WithMany()
                        .HasForeignKey("DamagedTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Governorates.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Profiles.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DamagedType");

                    b.Navigation("Governorate");

                    b.Navigation("Office");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Directorates.Directorate", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.GeneralDirectorates.GeneralDirectorate", "GeneralDirectorate")
                        .WithMany("Directorates")
                        .HasForeignKey("GeneralDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneralDirectorate");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.DocumentHistories.DocumentHistory", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Profiles.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.Document", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Documents.Document", "ParentDocument")
                        .WithMany("ChildDocuments")
                        .HasForeignKey("ParentDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OMSV1.Domain.Entities.Documents.PrivateParty", "PrivateParty")
                        .WithMany("Documents")
                        .HasForeignKey("PrivatePartyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OMSV1.Domain.Entities.Profiles.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Sections.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentDocument");

                    b.Navigation("PrivateParty");

                    b.Navigation("Profile");

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.DocumentCC", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Documents.Document", null)
                        .WithMany("CCs")
                        .HasForeignKey("DocumentId");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.DocumentCcLink", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Documents.DocumentCC", "DocumentCc")
                        .WithMany("DocumentLinks")
                        .HasForeignKey("DocumentCcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Documents.Document", "Document")
                        .WithMany("CcLinks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentCc");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.DocumentTagLink", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Documents.Document", "Document")
                        .WithMany("TagLinks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Documents.Tag", "Tag")
                        .WithMany("TagLinks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.Action", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Expenses.MonthlyExpenses", "MonthlyExpenses")
                        .WithMany("actions")
                        .HasForeignKey("MonthlyExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlyExpenses");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.DailyExpenses", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Expenses.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Expenses.MonthlyExpenses", "MonthlyExpenses")
                        .WithMany("dailyExpenses")
                        .HasForeignKey("MonthlyExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Expenses.DailyExpenses", "ParentExpense")
                        .WithMany("SubExpenses")
                        .HasForeignKey("ParentExpenseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExpenseType");

                    b.Navigation("MonthlyExpenses");

                    b.Navigation("ParentExpense");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.MonthlyExpenses", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Governorates.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Profiles.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Expenses.Threshold", "Threshold")
                        .WithMany()
                        .HasForeignKey("ThresholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Governorate");

                    b.Navigation("Office");

                    b.Navigation("Profile");

                    b.Navigation("Threshold");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.GeneralDirectorates.GeneralDirectorate", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Ministries.Ministry", "Ministry")
                        .WithMany("GeneralDirectorates")
                        .HasForeignKey("MinistryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ministry");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.Lecture", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OMSV1.Domain.Entities.Governorates.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Profiles.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Governorate");

                    b.Navigation("Office");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.LectureLectureType", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Lectures.Lecture", "Lecture")
                        .WithMany("LectureLectureTypes")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Lectures.LectureType", "LectureType")
                        .WithMany("LectureLectureTypes")
                        .HasForeignKey("LectureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("LectureType");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.LectureType", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Companies.Company", "Company")
                        .WithMany("LectureTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Offices.Office", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Governorates.Governorate", "Governorate")
                        .WithMany("Offices")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Profiles.Profile", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Governorates.Governorate", "Governorate")
                        .WithMany()
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Domain.Entities.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OMSV1.Infrastructure.Identity.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("OMSV1.Domain.Entities.Profiles.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Sections.Department", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Directorates.Directorate", "Directorate")
                        .WithMany("Departments")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directorate");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Sections.Section", b =>
                {
                    b.HasOne("OMSV1.Domain.Entities.Sections.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.AppUserRole", b =>
                {
                    b.HasOne("OMSV1.Infrastructure.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMSV1.Infrastructure.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.UserPermission", b =>
                {
                    b.HasOne("OMSV1.Infrastructure.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Companies.Company", b =>
                {
                    b.Navigation("LectureTypes");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Directorates.Directorate", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.Document", b =>
                {
                    b.Navigation("CCs");

                    b.Navigation("CcLinks");

                    b.Navigation("ChildDocuments");

                    b.Navigation("TagLinks");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.DocumentCC", b =>
                {
                    b.Navigation("DocumentLinks");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.PrivateParty", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Documents.Tag", b =>
                {
                    b.Navigation("TagLinks");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.DailyExpenses", b =>
                {
                    b.Navigation("SubExpenses");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Expenses.MonthlyExpenses", b =>
                {
                    b.Navigation("actions");

                    b.Navigation("dailyExpenses");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.GeneralDirectorates.GeneralDirectorate", b =>
                {
                    b.Navigation("Directorates");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Governorates.Governorate", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.Lecture", b =>
                {
                    b.Navigation("LectureLectureTypes");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Lectures.LectureType", b =>
                {
                    b.Navigation("LectureLectureTypes");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Ministries.Ministry", b =>
                {
                    b.Navigation("GeneralDirectorates");
                });

            modelBuilder.Entity("OMSV1.Domain.Entities.Sections.Department", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.AppRole", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OMSV1.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
